syntax = "proto3";
package rj.rj;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "rj/params.proto";
import "rj/section_id.proto";
import "rj/topic_id.proto";
import "rj/post_id.proto";
// this line is used by starport scaffolding # 1

option go_package = "rj/x/rj/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/rj/rj/params";
  }
  // Queries a SectionId by index.
	rpc SectionId(QueryGetSectionIdRequest) returns (QueryGetSectionIdResponse) {
		option (google.api.http).get = "/rj/rj/section_id";
	}
// Queries a TopicId by index.
	rpc TopicId(QueryGetTopicIdRequest) returns (QueryGetTopicIdResponse) {
		option (google.api.http).get = "/rj/rj/topic_id";
	}
// Queries a PostId by index.
	rpc PostId(QueryGetPostIdRequest) returns (QueryGetPostIdResponse) {
		option (google.api.http).get = "/rj/rj/post_id";
	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetSectionIdRequest {}

message QueryGetSectionIdResponse {
	SectionId SectionId = 1 [(gogoproto.nullable) = false];
}
message QueryGetTopicIdRequest {}

message QueryGetTopicIdResponse {
	TopicId TopicId = 1 [(gogoproto.nullable) = false];
}
message QueryGetPostIdRequest {}

message QueryGetPostIdResponse {
	PostId PostId = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
