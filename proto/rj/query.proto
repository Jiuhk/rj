syntax = "proto3";
package rj.rj;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "rj/params.proto";
import "rj/section_id.proto";
import "rj/topic_id.proto";
import "rj/post_id.proto";
import "rj/section.proto";
import "rj/topic.proto";
import "rj/post.proto";
// this line is used by starport scaffolding # 1

option go_package = "rj/x/rj/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/rj/rj/params";
  }
  // Queries a SectionId by index.
	rpc SectionId(QueryGetSectionIdRequest) returns (QueryGetSectionIdResponse) {
		option (google.api.http).get = "/rj/rj/section_id";
	}
// Queries a TopicId by index.
	rpc TopicId(QueryGetTopicIdRequest) returns (QueryGetTopicIdResponse) {
		option (google.api.http).get = "/rj/rj/topic_id";
	}
// Queries a PostId by index.
	rpc PostId(QueryGetPostIdRequest) returns (QueryGetPostIdResponse) {
		option (google.api.http).get = "/rj/rj/post_id";
	}
// Queries a Section by index.
	rpc Section(QueryGetSectionRequest) returns (QueryGetSectionResponse) {
		option (google.api.http).get = "/rj/rj/section/{sectionId}";
	}

	// Queries a list of Section items.
	rpc SectionAll(QueryAllSectionRequest) returns (QueryAllSectionResponse) {
		option (google.api.http).get = "/rj/rj/section";
	}

// Queries a Topic by index.
	rpc Topic(QueryGetTopicRequest) returns (QueryGetTopicResponse) {
		option (google.api.http).get = "/rj/rj/topic/{topicId}";
	}

	// Queries a list of Topic items.
	rpc TopicAll(QueryAllTopicRequest) returns (QueryAllTopicResponse) {
		option (google.api.http).get = "/rj/rj/topic";
	}

// Queries a Post by index.
	rpc Post(QueryGetPostRequest) returns (QueryGetPostResponse) {
		option (google.api.http).get = "/rj/rj/post/{postId}";
	}

	// Queries a list of Post items.
	rpc PostAll(QueryAllPostRequest) returns (QueryAllPostResponse) {
		option (google.api.http).get = "/rj/rj/post";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetSectionIdRequest {}

message QueryGetSectionIdResponse {
	SectionId SectionId = 1 [(gogoproto.nullable) = false];
}
message QueryGetTopicIdRequest {}

message QueryGetTopicIdResponse {
	TopicId TopicId = 1 [(gogoproto.nullable) = false];
}
message QueryGetPostIdRequest {}

message QueryGetPostIdResponse {
	PostId PostId = 1 [(gogoproto.nullable) = false];
}
message QueryGetSectionRequest {
	  uint64 sectionId = 1;

}

message QueryGetSectionResponse {
	Section section = 1 [(gogoproto.nullable) = false];
}

message QueryAllSectionRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSectionResponse {
	repeated Section section = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTopicRequest {
	  uint64 topicId = 1;

}

message QueryGetTopicResponse {
	Topic topic = 1 [(gogoproto.nullable) = false];
}

message QueryAllTopicRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTopicResponse {
	repeated Topic topic = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPostRequest {
	  uint64 postId = 1;

}

message QueryGetPostResponse {
	Post post = 1 [(gogoproto.nullable) = false];
}

message QueryAllPostRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPostResponse {
	repeated Post post = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
